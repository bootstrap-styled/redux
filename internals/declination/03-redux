#!/usr/bin/env bash
set -ex
git checkout ${PACKAGE_VERSION}-react
npm install
# start
npm run rollup-umd -- peer add redux --singleton
npm run rollup-umd -- peer add react-redux --singleton
npm run rollup-umd -- peer add reselect
# Ignore new globs in docs
npm run rollup-umd -- doc ignore "**/{sagas,selectors,actions,constants,reducer,theme}.{js,jsx,ts,tsx}"
# create dirs
mkdir -p src/components
mkdir -p src/components/tests

cat > src/index.js << EOL
export { default } from './components/index';
export { onToggleDemo } from './components/actions';
export { makeSelectDemo } from './components/selectors';
export { ON_TOGGLE_DEMO } from './components/constants';

EOL
cat > src/tests/index.test.js << EOL
/**
 * Testing exports
 */
const exported = require('../index');
describe('exports', () => {
  Object.keys(exported).forEach((e) => {
    it(\`should exports \${e}\`, () => {
      expect(exported[e]).toBeDefined();
    });
  });
});

EOL

cat > src/components/index.js << EOL
import React from 'react';
import PropTypes from 'prop-types';
import Button from 'bootstrap-styled/lib/Button';
import { compose } from 'redux';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import { makeSelectDemo } from './selectors';
import { onToggleDemo as onToggleDemoAction } from './actions';

/**
 * Demo component contain a RW operation on the store and disable the status
 */
class Demo extends React.Component { // eslint-disable-line react/prefer-stateless-function
  static propTypes = {
    /** A boolean value to toggle for the demo of the redux store */
    demo: PropTypes.bool.isRequired,
    /** A dispatch function to be called for toggling the demo */
    onToggleDemo: PropTypes.func.isRequired,
  };

  render() {
    return (
      <Button onClick={this.props.onToggleDemo}>
        Toggle status {this.props.demo.toString()}
      </Button>
    );
  }
}

const mapStateToProps = createStructuredSelector({
  demo: makeSelectDemo(),
});

const mapDispatchToProps = (dispatch) => ({
  onToggleDemo: () => dispatch(onToggleDemoAction()),
});

const withConnect = connect(mapStateToProps, mapDispatchToProps);

export default compose(withConnect)(Demo);

EOL
cat > src/components/tests/index.test.js << EOL
/**
 * Testing example
 */

import React from 'react';
import { shallow, mount } from 'enzyme';
import Demo from '../index';
import Wrapper from '../../../styleguide/components/Wrapper';

describe('<Demo />', () => {
  it('should render a <Demo /> tag', () => {
    const renderedComponent = shallow(<Wrapper><Demo /></Wrapper>);
    expect(renderedComponent.length).toBe(1);
  });
  it('should toggle demo state', () => {
    const renderedComponent = mount(<Wrapper><Demo /></Wrapper>);
    expect(renderedComponent.find('Demo').props().demo).toEqual(false);
    renderedComponent.find('Button').simulate('click');
    expect(renderedComponent.find('Demo').props().demo).toEqual(true);
  });
});

EOL

cat > src/components/index.md << EOL
\`\`\`js
<Demo />
\`\`\`

EOL

cat > src/components/actions.js << EOL
import { ON_TOGGLE_DEMO } from './constants';

export function onToggleDemo() {
  return {
    type: ON_TOGGLE_DEMO,
  };
}

EOL

cat > src/components/tests/actions.test.js << EOL
import { ON_TOGGLE_DEMO } from '../constants';

import { onToggleDemo } from '../actions';

describe('Demo Actions', () => {
  describe('onToggleDemo', () => {
    it('should return the correct type', () => {
      const expectedResult = { type: ON_TOGGLE_DEMO };
      expect(onToggleDemo()).toEqual(expectedResult);
    });
  });
});

EOL


cat > src/components/reducer.js << EOL
/*
 * The reducer takes care of our data
 * Using actions, we can change our application state
 * To add a new action, add it to the switch statement in the homeReducer function
 */
import { ON_TOGGLE_DEMO } from './constants';

// The initial application state
export const initialState = {
  demo: false,
};

// Takes care of changing the application state
function demoReducer(state = initialState, action) {
  switch (action.type) {
    case ON_TOGGLE_DEMO: {
      const newState = Object.assign({}, state, { demo: !state.demo });
      return newState;
    }
    default:
      return state;
  }
}

export default demoReducer;

EOL

cat > src/components/tests/reducer.test.js << EOL
import demoReducer, { initialState } from '../reducer';
import { onToggleDemo } from '../actions';

describe('demoReducer', () => {
  let state;

  beforeEach(() => {
    state = initialState;
  });

  it('should return the initial state', () => {
    const expectedResult = state;
    expect(demoReducer(undefined, {})).toEqual(expectedResult);
  });

  it('should handle the toggleDemo action correctly', () => {
    const toggledState = {
      demo: !state.demo,
    };
    expect(demoReducer(state, onToggleDemo())).toEqual(toggledState);
  });
});

EOL

cat > src/components/selectors.js << EOL
export const selectBsDemo = (state) => state['bs.demo'];
export const makeSelectDemo = () => (state) => selectBsDemo(state).demo;

EOL

cat > src/components/tests/selectors.test.js << EOL
import {
  selectBsDemo,
  makeSelectDemo,
} from '../selectors';

describe('Demo Selectors', () => {
  let state;
  let demoState;

  beforeEach(() => {
    demoState = {
      demo: false,
    };
    state = {
      'bs.demo': demoState,
    };
  });

  describe('selectBsDemo', () => {
    it('should select the demo state', () => {
      expect(selectBsDemo(state)).toEqual(demoState);
    });
  });
  describe('makeSelectDemo', () => {
    it('should select demo', () => {
      expect(makeSelectDemo()(state)).toEqual(demoState.demo);
    });
  });
});

EOL


cat > src/components/constants.js << EOL
/*
 * userMenu
 * These are the variables that determine what our central data store (reducer.js)
 * changes in our state. When you add a new action, you have to add a new constant here
 *
 * Follow this format:
 * export const YOUR_ACTION_CONSTANT = 'YOUR_ACTION_CONSTANT';
 */

export const ON_TOGGLE_DEMO = 'rollup-umd/demo/ON_TOGGLE_DEMO';
EOL

cat > styleguide/components/Wrapper.js << EOL
import React, { Component } from 'react';
import Provider from 'react-redux/lib/components/Provider';
import PropTypes from 'prop-types';
import { createStore, combineReducers, applyMiddleware, compose } from 'redux';
import reducer from '../../src/components/reducer';

export default class Wrapper extends Component { // eslint-disable-line react/prefer-stateless-function
  static propTypes = {
    children: PropTypes.node.isRequired,
  };

  state = {
    store: null,
  }

  /* eslint-disable no-underscore-dangle, function-paren-newline */
  componentWillMount() {
    const middleware = [];
    const composeEnhancers =
      typeof window === 'object' &&
      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?
        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({
          // Specify extensionâ€™s options like name, actionsBlacklist, actionsCreators, serialize...
        }) : compose;

    const enhancer = composeEnhancers(applyMiddleware(...middleware),
      // other store enhancers if any
    );

    const store = createStore(combineReducers({ 'bs.demo': reducer }), enhancer);
    this.setState({
      store,
    });
  }
  /* eslint-enable no-underscore-dangle, function-paren-newline */

  render() {
    return (
      <Provider store={this.state.store}>
        {this.props.children}
      </Provider>
    );
  }
}

EOL

