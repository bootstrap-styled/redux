#!/usr/bin/env bash
set -ex
git checkout ${PACKAGE_VERSION}-bs-redux
npm install
# start
npm run rollup-umd -- peer add redux-immutable
npm run rollup-umd -- peer add immutable
# override existing to immutable examples
cat > src/components/reducer.js << EOL
/*
 * The reducer takes care of our data
 * Using actions, we can change our application state
 * To add a new action, add it to the switch statement in the homeReducer function

 */
import { fromJS } from 'immutable';
import { ON_TOGGLE_DEMO } from './constants';

// The initial application state
export const initialState = fromJS({
  demo: false,
});

// Takes care of changing the application state
function demoReducer(state = initialState, action) {
  switch (action.type) {
    case ON_TOGGLE_DEMO: {
      return state.set('demo', !state.get('demo'));
    }
    default:
      return state;
  }
}

export default demoReducer;

EOL
cat > src/components/selectors.js << EOL
export const selectBsDemo = (state) => state['bs.demo'];
export const makeSelectDemo = () => (state) => selectBsDemo(state).get('demo');

EOL
cat > src/components/tests/reducer.test.js << EOL
import { fromJS } from 'immutable';
import demoReducer, { initialState } from '../reducer';
import { onToggleDemo } from '../actions';

describe('demoReducer', () => {
  let state;

  beforeEach(() => {
    state = initialState;
  });

  it('should return the initial state', () => {
    const expectedResult = state;
    expect(demoReducer(undefined, {})).toEqual(expectedResult);
  });

  it('should handle the sendingRequest action correctly', () => {
    const toggledState = fromJS({
      demo: !state.get('demo'),
    });
    expect(demoReducer(state, onToggleDemo())).toEqual(toggledState);
  });
});

EOL
cat > src/components/tests/selectors.test.js << EOL
import { fromJS } from 'immutable';
import { selectBsDemo, makeSelectDemo } from '../selectors';

describe('Demo Selectors', () => {
  let state;
  let demoState;

  beforeEach(() => {
    demoState = fromJS({
      demo: false,
    });
    state = {
      'bs.demo': demoState,
    };
  });

  describe('selectBsDemo', () => {
    it('should select the demo state', () => {
      expect(selectBsDemo(state)).toEqual(demoState);
    });
  });
  describe('makeSelectDemo', () => {
    it('should select demo', () => {
      expect(makeSelectDemo()(state)).toEqual(demoState.get('demo'));
    });
  });
});

EOL
